Commit - checkpoint
HEAD
REMOTE master
Local master
Branch
Checkout
Rebase
Merge
Push
Pull
Stage
Stash
Clean
Origin

 git-scm.com = scm - source control management
=====================================================================================
INSTALL LATEST GIT FOR CENTOS/REDHAT
STEPS
 sudo yum -y remove git git-*
 sudo yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
 sudo yum install git -y
 sudo git --version
=====================================================================================
=====================================================================================
If you havenâ€™t already, set your local default git branch to main. 
You can do so by running: git config --global init.defaultBranch main

=============================================================================================

Git Config
[instructor@jan23 ~]$ git config --global user.name "Your Namer"
[instructor@jan23 ~]$ git config --global user.email youremail@.com

Initializing Projects
git init = creates invisible folder .git (in the project directory)

STAGING FILES = Temporary area to store files
git add filename
#git add --all
#git add -A
#git add .
git commit -m "First Commit"

Track
git log

UNDERSTANDING ENVIRONMENT
Git Information 
commit 3fe5143d21b0ebe397be55af52ab59b69b5d6faf (Git hash - Unique ID for commit)
Author: Linux Instructor <youremail>
Date:   Fri Jul 14 00:29:50 2023 -0400

Git Environment
- Working tree
- Staging (think of it as dating before marriage)
- Commit = 

=== File States ===
~  Tracked - existed in the previous snapshots/commits
~  Untracked -

== Tracked Files ==
~ Unmodified - Files haven't changed since last commit
~ Modified - Changed files
~ Staged

Git Status

==Restoring Files== - Discarding changes made
git restore filename/.
or
git checkout . (..." to discard changes in working directory)


To unstage
git reset HEAD <file>..." to unstage
git restore --staged <file>..." to unstage


Add New file
git status - shows modified state
git git restore - Nothing happen cus git only tracks staged/commited files)

==IGNORING FILES==
Why ignore files ?
* Sensitive info
* Personal notes
* System files

Using .gitignore
~ create .gitignore file in project directory 
# touch .gitignore = add and commit
Add filenames or directory names or extensions to be ignored to the .gitignore file by using vim or echo.

Then create those files or directories in the project directory( if they don't exist). If they do add new entry and run git status to verify in staging if anything shows up. 

Global Ignore File - Added automatically to new projects created
git config --global core.excludesfile [file]

Clearing the Cache
git rm -r --cached .

==DELETING AND RENAMING==
=Deleting=
~ Deleting from filesystem, add and commit.
# rm -rf filename
*** to restore #git checkout or git restore

~ Deleting using git
git rm filename - deletes and add to staging
*** to restore = 2 parts
1. # git reset HEAD . or filename OR git restore --staged(-S) filename
2. # git checkout . or filename OR git restore filename

=Renaming=
OPTION 1 ~ Renaming from filesystem, add and commit.
Two (2) things happens as recorded by git 
1. File deletion
2. File addition (untracked)

To undo (2 parts)
# git restore - to keep restore oldfile name

However, a new file is alreaddy created (Verify with git status)
To remove, manually delete from filesystem.
< git rm > fails bcos it's not yet tracked by git.

OPTION 2 - Using git command
# git mv oldname newname

To undo
simply reverse the names with "git mv"

DIFFERENCES
modify a file with vim or vscode (add or remove lines or characters)
# git diff

comparing after moving

>> git log
>> git log --oneline
>> git diff 3fe5143 (commit hash)

======CHANGE HISTORY======
=Amending=
git commit --amend
# git commit -am "New commit message"
# git commit --amend --no-edit

=====
#git reset "commit hash" - Reverting to a previous commit. Move HEAD back one commit.
DANGER-->> git reset --hard "preferred commit hash" 

=========REBASING========= https://youtu.be/f1wnYdLEpgI
Taking commits from one branch and applying them to another. (Rewrites history)
Moving commits from featured branch and stacking them on top of another branch.
**Rebasing --> moving commit timelines from one checkpoint to another. 
git rebase <branch>/<commit>
#git rebase --interactive <branch>/<commit>
#git rebase -i HEAD~#
#git rebase -i --root

====BRANCHES========
Git branch

copying a branch
#git switch -c NAME 
OR
#git checkout -b NAME


====MERGING====
Sychronize changes. Merge from one branch into the current branch.
git merge <branch>

====DELETING A BRANCH=====
#git branch --delete NAME
#git branch -d NAME = only deletes whe free of conflicts
#git branch -D Name = Forcefully deletes by ignoring conflicts


===GIT FLOW=====
Feature/fix branch
Make changes
Merge to master
Delete old branch


++++MERGE CONFLICTS+++


===STASH AND CLEAN====
Stash - putting away code to work on something else.
git stash = 
git stash list = what's stored
git stash apply = apply a stash set of changes
git stash pop = removes stash

++Clean++
git clean = removes all untracked files and directories from branch
# git clean -n - dry run
# git clean -dn = directory dry run
# git clean -d - directories
# git clean -f - force

=====================================================================
WHAT IS GITHUB - Collaborative Platform
Online service for developers. Social Coding Website
* Cloud Repository
* Collaborative Development
* Project Management

+++Working with GitHub+++++
- Set up remote
- Push
- Fetch/Pull

++++++++++++++++++++++++++++++++++
Create a new repository on GitHub
+++++++++++++++++++++++++++++++++++

-----------------------------------------
Create a new repository on the command line
-------------------------------------------
echo "# linux_admin_jan23" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
*****git remote add origin https://github.com/kwameosew/linux_admin_jan23*****
git push -u origin main

OR push an existing repository from the command line
-----------------------------------------------------
git remote add origin https://github.com/kwameosew/linux_admin_jan23
git branch -M main
git push -u origin main


=====Pushing to GitHub======
+++Remotes++ [Common name = origin]
git remote add NAME URL
git remote remove NAME = delete remote
git remote rename OLDNAME NEWNAME = rename remote
git remote -v = list all remotes

+++Git Push+++ 
=== Moving files from local machine/directory to GitHub
== Local branches must be connected to the remote version of the branch

git push REMOTE BRANCH
# git push --set-upstream-to origin main
git push -u origin main
# git push --all
# git branch --set-upstream-to <origin/remote-branch>
1245  git branch --set-upstream-to=origin/main 
 1246  git push -u origin origin/main 
=====================================================================
#####################################################################

************************************************************************
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Avoid git asking for username and password everytime
change https url to ssh url

# git remote set-url origin git@github.com:kwameosew/linux_admin_jan23.git

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
****************************************************************************


GitHub TABS
#####################
issues = to do items
pull request = approving changes made by a collaborator & compare diff branches
Actions - run test 
Projects - To do / 
Wiki - Documentation
Security - Manage policies
Insights - Contributions & tracking
Settings - Settings/Manage


PULL REQUEST
#################


ORGANIZING PROJECTS
Managing projects
*Contributors
*Issues
*Labels
*Milestones
*Projects

======Add Collaborators=======


======SYNCING GITHUB======
CLONE = copy of GitHub repo is placed on local hard drive.
Fetch = (copy of repo already exists)
        ONLY Downloads information from remote repo to local drive to ensure it's up-to-date.
Pull - Combination of fetch and also merging data in remote repo with local version.	


#########+++++++ GIT CLONE +++++++++#######
To clone a repo
git clone git@github.com:USER-NAME/REPOSITORY-NAME.git
https://github.com/USER-NAME/REPOSITORY-NAME.git


FETCH
git fetch

PULL
git pull

PUSH
git push



































































































